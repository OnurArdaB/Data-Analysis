# -*- coding: utf-8 -*-
"""HeartDisease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PzKBwwqTcIuCrmRe8o0Q1QYmg4t4T31T

### Import libraries and load dataset
"""

from google.colab import drive
drive.mount("/content/drive")

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %autocall 2
import tensorflow as tf
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import plot_model

df = pd.read_csv("/content/drive/My Drive/DataAnalysis/HeartDisease/heart.csv")

df.head()

"""### Data Description"""

df.isnull().sum()

"""The dataset does not contain any missing values so this is a good start."""

df.describe()

"""Oldest instance is 77 years old and the average of ages is  55.Youngest instance is 29 years old.There are 303 total of instances in the dataset with some values pointed out as binary like gender which is stated as 1 and 0."""

df.info()

for column in df:
  print(column," : ",df[column].unique())
  print("------------------------------------------------------------------------------------------------------------------")

"""### EDA"""

pd.crosstab(df.age,df.target).plot(kind="bar",figsize=(25,8))
plt.title('Heart Disease Frequency for Ages')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

pd.crosstab(df.sex,df.target).plot(kind="bar",figsize=(10,5))
plt.xlabel('(0 = Female, 1 = Male)')
plt.xticks(rotation=0)
plt.legend(["No Disease", "Disease"])
plt.ylabel('Frequency')
plt.show()

pd.crosstab(df.cp,df.target).plot(kind="bar",figsize=(10,5))
plt.xlabel('Chest Pain Type')
plt.xticks(rotation = 0)
plt.ylabel('Frequency of Disease or Not')
plt.show()

plt.figure(figsize=(16,8))
plt.subplot(2,2,1)
plt.scatter(x=df.age[df.target==1],y=df.thalach[df.target==1],c='blue')
plt.scatter(x=df.age[df.target==0],y=df.thalach[df.target==0],c='orange')
plt.xlabel('Age')
plt.ylabel('Max Heart Rate')
plt.legend(['Disease','No Disease'])

plt.subplot(2,2,2)
plt.scatter(x=df.age[df.target==1],y=df.chol[df.target==1],c='blue')
plt.scatter(x=df.age[df.target==0],y=df.chol[df.target==0],c='orange')
plt.xlabel('Age')
plt.ylabel('Cholesterol')
plt.legend(['Disease','No Disease'])

plt.subplot(2,2,3)
plt.scatter(x=df.age[df.target==1],y=df.trestbps[df.target==1],c='red')
plt.scatter(x=df.age[df.target==0],y=df.trestbps[df.target==0],c='green')
plt.xlabel('Age')
plt.ylabel('Resting Blood Pressure')
plt.legend(['Disease','No Disease'])

plt.subplot(2,2,4)
plt.scatter(x=df.age[df.target==1],y=df.oldpeak[df.target==1],c='red')
plt.scatter(x=df.age[df.target==0],y=df.oldpeak[df.target==0],c='green')
plt.xlabel('Age')
plt.ylabel('ST depression')
plt.legend(['Disease','No Disease'])
plt.show()

"""The dataset is almost clear for pre-processing since every column is ranged with regarding numbers.We must deal with few of them.There exists some ordinal data and some categorical data and these data must not be presented in the same manner,some data will be encoded properly."""

categories = ['sex','cp','fbs','restecg','exang','slope','ca','thal']
for category in categories:
  df[category] = df[category].astype('category')

df = pd.get_dummies(df)
df.head()

df.shape

target = df['target']
df.drop(columns=['target'],axis=1,inplace = True)
df.head()

scaled_df = StandardScaler().fit_transform(df)

X_train,X_test,y_train,y_test = train_test_split(scaled_df,target,test_size=0.33,random_state=42)

model = tf.keras.Sequential()

model.add(tf.keras.layers.Flatten(input_shape=(30,)))

model.add(tf.keras.layers.Dense(16, activation='swish'))

model.add(tf.keras.layers.Dense(16, activation='swish'))

model.add(tf.keras.layers.Dense(16, activation='swish'))

model.add(tf.keras.layers.Dense(16, activation='swish'))

model.add(tf.keras.layers.Dense(1, activation='sigmoid'))

model.compile(loss="binary_crossentropy",optimizer="adam",metrics=['accuracy'])

plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)

model.fit(X_train,y_train,epochs=30,batch_size=1)

y_pred=model.predict(X_test)

from sklearn.metrics import classification_report

print(classification_report(y_test,y_pred.round()))

from sklearn.metrics import accuracy_score

print(accuracy_score(y_test,y_pred.round()))