# -*- coding: utf-8 -*-
"""Covid-19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C9KYssDOFPzgXupqkr-C2ywyDcIsAUat

#Covid-19 Detection
"""

from google.colab import drive
drive.mount("gdrive")

"""## Import the necessary libraries"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import cv2
import shutil
import os

#ML libraries and utils
from sklearn.preprocessing import StandardScaler,MinMaxScaler
from sklearn.model_selection import train_test_split

import tensorflow as tf

"""## Dataset"""

metadata = pd.read_csv("/content/gdrive/My Drive/DataAnalysis/Covid19/Chest_xray_Corona_Metadata.csv")
summary = pd.read_csv("/content/gdrive/My Drive/DataAnalysis/Covid19/Chest_xray_Corona_dataset_Summary.csv")

"""The dataset is a little bit complex and needs to be cleared out before getting started to analyze.*metadata* dataframe contains the X-ray file names.Each instance of a X-ray is also labeled stating whether the patient is healthy or 
a person with pneumonia.

*summary* dataframe only contains information regarding on the distribution of the categorical variables among the columns.
"""

metadata.head()

metadata.shape

sns.countplot(metadata.Label)

summary.head()

summary

metadata.Label_1_Virus_category.fillna("healthy",inplace=True)

sns.countplot(metadata.Label_1_Virus_category)

sns.countplot(metadata.Label_2_Virus_category)

for i, row in metadata.iterrows():
  if pd.isnull(row.Label_2_Virus_category) and row.Label_1_Virus_category=="bacteria":
    ifor_val = "unknown_bacteria"
    metadata.at[i,'Label_2_Virus_category']=ifor_val
  elif pd.isnull(row.Label_2_Virus_category) and row.Label_1_Virus_category=="Virus":
    ifor_val="unknown_virus"
    metadata.at[i,'Label_2_Virus_category']=ifor_val
  elif pd.isnull(row.Label_2_Virus_category) and row.Label_1_Virus_category=="healthy":
    ifor_val="healthy"
    metadata.at[i,'Label_2_Virus_category']=ifor_val

sns.countplot(metadata.Label_2_Virus_category)

sns.countplot(metadata.Label_2_Virus_category)

"""## X-ray metadata

## Train-Test Generator
"""

from keras.preprocessing.image import ImageDataGenerator,load_img,img_to_array
from shutil import rmtree,copy2
import os

"""###Traini Directory"""

train_df = metadata[metadata.Dataset_type=="TRAIN"]

train_df.shape

train_df.Label.value_counts()

os.makedirs('/content/train/',exist_ok=True)
for class_ in train_df.Label.unique():
  os.makedirs('train/'+str(class_)+'/',exist_ok=True)

y_train = train_df.Label

for image,type_  in zip(train_df.X_ray_image_name	, y_train):
    copy2(os.path.join("/content/gdrive/My Drive/DataAnalysis/Covid19/Coronahack-Chest-XRay-Dataset/Coronahack-Chest-XRay-Dataset/train",image), 'train/'+type_)

"""### Test Directory"""

test_df = metadata[metadata.Dataset_type=="TEST"]

test_df.shape

y_test = test_df.Label

test_df.Label.value_counts()

os.makedirs('/content/test/',exist_ok=True)
for class_ in test_df.Label.unique():
  os.makedirs('test/'+str(class_)+'/',exist_ok=True)

for image,type_  in zip(test_df.X_ray_image_name	, y_test):
    copy2(os.path.join("/content/gdrive/My Drive/DataAnalysis/Covid19/Coronahack-Chest-XRay-Dataset/Coronahack-Chest-XRay-Dataset/test",image), 'test/'+type_)

#train_df = train_df[(train_df.Label_2_Virus_category=="healthy")|(train_df.Label_2_Virus_category=="COVID-19") ]

"""### Data Generators"""

train_data_gen = ImageDataGenerator(
    rescale=1./255,
)
train_generator = train_data_gen.flow_from_directory(
    "/content/train",
    batch_size=32,
    class_mode="binary"
)

valid_data_gen = ImageDataGenerator(
    rescale=1./255,
)

valid_generator = train_data_gen.flow_from_directory(
    "/content/test",
    batch_size=32,
    class_mode="binary"
)

"""## DenseNet-121"""

dense_net121 = tf.keras.applications.DenseNet121(
    include_top=False, weights='imagenet',input_shape= (256,256,3)
)
for layer in dense_net121.layers:
    layer.trainable = False

model=tf.keras.Sequential()
model.add(dense_net121)
model.add(tf.keras.layers.MaxPooling2D(name="MaxPool_"))
model.add(tf.keras.layers.Dropout(0.2, name="dropout_out"))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer="adam",
              metrics=['accuracy'])

history = model.fit_generator(train_generator,
                              epochs=5,
                              validation_data=valid_generator
                              )

import plotly.graph_objects as go
fig = go.Figure()


fig.add_trace(go.Scatter(x=list(range(1,11)), y=history.history['accuracy'],
                         line=dict(color='orange', width=2, dash='dash'), name='accuracy'))
fig.add_trace(go.Scatter(x=list(range(1,11)), y=history.history['val_accuracy'],
                         line=dict(color='green', width=2), name='validation accuracy'))

fig.update_layout(title_text='Plot of evaluation metrics', font_size=15, xaxis_title='Epochs')
fig.show()